//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("ProductsModel", "FK_echoCathegory_echoGroups", "echoGroups", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(echo.BLL.Products.Group), "echoCathegory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(echo.BLL.Products.Cathegory))]
[assembly: EdmRelationshipAttribute("ProductsModel", "FK_echoCathegory_echoTemplate", "echoTemplate", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(echo.BLL.Products.Template), "echoCathegory", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(echo.BLL.Products.Cathegory))]
[assembly: EdmRelationshipAttribute("ProductsModel", "FK_echoCollection_echoCathegory", "echoCathegory", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(echo.BLL.Products.Cathegory), "echoCollection", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(echo.BLL.Products.Collection))]
[assembly: EdmRelationshipAttribute("ProductsModel", "FK_echoCollection_echoProducts", "echoProducts", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(echo.BLL.Products.Product), "echoCollection", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(echo.BLL.Products.Collection))]
[assembly: EdmRelationshipAttribute("ProductsModel", "FK_echoProductColors_echoColors", "echoColors", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(echo.BLL.Products.Color), "echoProductColors", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(echo.BLL.Products.ProductColor))]
[assembly: EdmRelationshipAttribute("ProductsModel", "FK_echoProducts_echoPlatforms", "echoPlatforms", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(echo.BLL.Products.Platform), "echoProducts", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(echo.BLL.Products.Product))]
[assembly: EdmRelationshipAttribute("ProductsModel", "FK_echoProductColors_echoProducts", "echoProducts", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(echo.BLL.Products.Product), "echoProductColors", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(echo.BLL.Products.ProductColor))]
[assembly: EdmRelationshipAttribute("ProductsModel", "FK_echoProductSizes_echoProductColors", "echoProductColors", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(echo.BLL.Products.ProductColor), "echoProductSizes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(echo.BLL.Products.ProductSize))]
[assembly: EdmRelationshipAttribute("ProductsModel", "FK_echoProductSizes_echoSizes", "echoSizes", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(echo.BLL.Products.Size), "echoProductSizes", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(echo.BLL.Products.ProductSize))]
[assembly: EdmRelationshipAttribute("ProductsModel", "FK_echoProducts_echoBrands", "echoBrands", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(echo.BLL.Products.Brand), "Product", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(echo.BLL.Products.Product))]

#endregion

namespace echo.BLL.Products
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class ProductsEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект ProductsEntities, используя строку соединения из раздела "ProductsEntities" файла конфигурации приложения.
        /// </summary>
        public ProductsEntities() : base("name=ProductsEntities", "ProductsEntities")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта ProductsEntities.
        /// </summary>
        public ProductsEntities(string connectionString) : base(connectionString, "ProductsEntities")
        {
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта ProductsEntities.
        /// </summary>
        public ProductsEntities(EntityConnection connection) : base(connection, "ProductsEntities")
        {
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Cathegory> Cathegories
        {
            get
            {
                if ((_Cathegories == null))
                {
                    _Cathegories = base.CreateObjectSet<Cathegory>("Cathegories");
                }
                return _Cathegories;
            }
        }
        private ObjectSet<Cathegory> _Cathegories;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Collection> Collections
        {
            get
            {
                if ((_Collections == null))
                {
                    _Collections = base.CreateObjectSet<Collection>("Collections");
                }
                return _Collections;
            }
        }
        private ObjectSet<Collection> _Collections;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Color> Colors
        {
            get
            {
                if ((_Colors == null))
                {
                    _Colors = base.CreateObjectSet<Color>("Colors");
                }
                return _Colors;
            }
        }
        private ObjectSet<Color> _Colors;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Group> Groups
        {
            get
            {
                if ((_Groups == null))
                {
                    _Groups = base.CreateObjectSet<Group>("Groups");
                }
                return _Groups;
            }
        }
        private ObjectSet<Group> _Groups;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Platform> Platforms
        {
            get
            {
                if ((_Platforms == null))
                {
                    _Platforms = base.CreateObjectSet<Platform>("Platforms");
                }
                return _Platforms;
            }
        }
        private ObjectSet<Platform> _Platforms;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ProductColor> ProductColors
        {
            get
            {
                if ((_ProductColors == null))
                {
                    _ProductColors = base.CreateObjectSet<ProductColor>("ProductColors");
                }
                return _ProductColors;
            }
        }
        private ObjectSet<ProductColor> _ProductColors;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Product> Products
        {
            get
            {
                if ((_Products == null))
                {
                    _Products = base.CreateObjectSet<Product>("Products");
                }
                return _Products;
            }
        }
        private ObjectSet<Product> _Products;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ProductSize> ProductSizes
        {
            get
            {
                if ((_ProductSizes == null))
                {
                    _ProductSizes = base.CreateObjectSet<ProductSize>("ProductSizes");
                }
                return _ProductSizes;
            }
        }
        private ObjectSet<ProductSize> _ProductSizes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Size> Sizes
        {
            get
            {
                if ((_Sizes == null))
                {
                    _Sizes = base.CreateObjectSet<Size>("Sizes");
                }
                return _Sizes;
            }
        }
        private ObjectSet<Size> _Sizes;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Template> Templates
        {
            get
            {
                if ((_Templates == null))
                {
                    _Templates = base.CreateObjectSet<Template>("Templates");
                }
                return _Templates;
            }
        }
        private ObjectSet<Template> _Templates;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Brand> Brands
        {
            get
            {
                if ((_Brands == null))
                {
                    _Brands = base.CreateObjectSet<Brand>("Brands");
                }
                return _Brands;
            }
        }
        private ObjectSet<Brand> _Brands;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Cathegories. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCathegories(Cathegory cathegory)
        {
            base.AddObject("Cathegories", cathegory);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Collections. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToCollections(Collection collection)
        {
            base.AddObject("Collections", collection);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Colors. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToColors(Color color)
        {
            base.AddObject("Colors", color);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Groups. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToGroups(Group group)
        {
            base.AddObject("Groups", group);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Platforms. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToPlatforms(Platform platform)
        {
            base.AddObject("Platforms", platform);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ProductColors. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToProductColors(ProductColor productColor)
        {
            base.AddObject("ProductColors", productColor);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Products. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToProducts(Product product)
        {
            base.AddObject("Products", product);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ProductSizes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToProductSizes(ProductSize productSize)
        {
            base.AddObject("ProductSizes", productSize);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Sizes. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToSizes(Size size)
        {
            base.AddObject("Sizes", size);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Templates. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTemplates(Template template)
        {
            base.AddObject("Templates", template);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Brands. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToBrands(Brand brand)
        {
            base.AddObject("Brands", brand);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="Brand")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Brand : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Brand.
        /// </summary>
        /// <param name="brandId">Исходное значение свойства BrandId.</param>
        /// <param name="brandName">Исходное значение свойства BrandName.</param>
        public static Brand CreateBrand(global::System.Int32 brandId, global::System.String brandName)
        {
            Brand brand = new Brand();
            brand.BrandId = brandId;
            brand.BrandName = brandName;
            return brand;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BrandId
        {
            get
            {
                return _BrandId;
            }
            set
            {
                if (_BrandId != value)
                {
                    OnBrandIdChanging(value);
                    ReportPropertyChanging("BrandId");
                    _BrandId = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("BrandId");
                    OnBrandIdChanged();
                }
            }
        }
        private global::System.Int32 _BrandId;
        partial void OnBrandIdChanging(global::System.Int32 value);
        partial void OnBrandIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BrandName
        {
            get
            {
                return _BrandName;
            }
            set
            {
                OnBrandNameChanging(value);
                ReportPropertyChanging("BrandName");
                _BrandName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("BrandName");
                OnBrandNameChanged();
            }
        }
        private global::System.String _BrandName;
        partial void OnBrandNameChanging(global::System.String value);
        partial void OnBrandNameChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProducts_echoBrands", "Product")]
        public EntityCollection<Product> Products
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Product>("ProductsModel.FK_echoProducts_echoBrands", "Product");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Product>("ProductsModel.FK_echoProducts_echoBrands", "Product", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="Cathegory")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Cathegory : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Cathegory.
        /// </summary>
        /// <param name="activeStatus">Исходное значение свойства ActiveStatus.</param>
        /// <param name="catID">Исходное значение свойства CatID.</param>
        /// <param name="catNameEng">Исходное значение свойства CatNameEng.</param>
        /// <param name="catNameRus">Исходное значение свойства CatNameRus.</param>
        /// <param name="dateCreated">Исходное значение свойства DateCreated.</param>
        /// <param name="marked">Исходное значение свойства Marked.</param>
        /// <param name="catOrder">Исходное значение свойства CatOrder.</param>
        /// <param name="inGeneralLink">Исходное значение свойства InGeneralLink.</param>
        public static Cathegory CreateCathegory(global::System.Boolean activeStatus, global::System.Int32 catID, global::System.String catNameEng, global::System.String catNameRus, global::System.DateTime dateCreated, global::System.Boolean marked, global::System.Int32 catOrder, global::System.Boolean inGeneralLink)
        {
            Cathegory cathegory = new Cathegory();
            cathegory.ActiveStatus = activeStatus;
            cathegory.CatID = catID;
            cathegory.CatNameEng = catNameEng;
            cathegory.CatNameRus = catNameRus;
            cathegory.DateCreated = dateCreated;
            cathegory.Marked = marked;
            cathegory.CatOrder = catOrder;
            cathegory.InGeneralLink = inGeneralLink;
            return cathegory;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean ActiveStatus
        {
            get
            {
                return _ActiveStatus;
            }
            set
            {
                OnActiveStatusChanging(value);
                ReportPropertyChanging("ActiveStatus");
                _ActiveStatus = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ActiveStatus");
                OnActiveStatusChanged();
            }
        }
        private global::System.Boolean _ActiveStatus;
        partial void OnActiveStatusChanging(global::System.Boolean value);
        partial void OnActiveStatusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CatID
        {
            get
            {
                return _CatID;
            }
            set
            {
                if (_CatID != value)
                {
                    OnCatIDChanging(value);
                    ReportPropertyChanging("CatID");
                    _CatID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CatID");
                    OnCatIDChanged();
                }
            }
        }
        private global::System.Int32 _CatID;
        partial void OnCatIDChanging(global::System.Int32 value);
        partial void OnCatIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CatNameEng
        {
            get
            {
                return _CatNameEng;
            }
            set
            {
                OnCatNameEngChanging(value);
                ReportPropertyChanging("CatNameEng");
                _CatNameEng = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CatNameEng");
                OnCatNameEngChanged();
            }
        }
        private global::System.String _CatNameEng;
        partial void OnCatNameEngChanging(global::System.String value);
        partial void OnCatNameEngChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CatNameRus
        {
            get
            {
                return _CatNameRus;
            }
            set
            {
                OnCatNameRusChanging(value);
                ReportPropertyChanging("CatNameRus");
                _CatNameRus = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CatNameRus");
                OnCatNameRusChanged();
            }
        }
        private global::System.String _CatNameRus;
        partial void OnCatNameRusChanging(global::System.String value);
        partial void OnCatNameRusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateUpdated
        {
            get
            {
                return _DateUpdated;
            }
            set
            {
                OnDateUpdatedChanging(value);
                ReportPropertyChanging("DateUpdated");
                _DateUpdated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateUpdated");
                OnDateUpdatedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateUpdated;
        partial void OnDateUpdatedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateUpdatedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DescriptionEng
        {
            get
            {
                return _DescriptionEng;
            }
            set
            {
                OnDescriptionEngChanging(value);
                ReportPropertyChanging("DescriptionEng");
                _DescriptionEng = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DescriptionEng");
                OnDescriptionEngChanged();
            }
        }
        private global::System.String _DescriptionEng;
        partial void OnDescriptionEngChanging(global::System.String value);
        partial void OnDescriptionEngChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DescriptionRus
        {
            get
            {
                return _DescriptionRus;
            }
            set
            {
                OnDescriptionRusChanging(value);
                ReportPropertyChanging("DescriptionRus");
                _DescriptionRus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DescriptionRus");
                OnDescriptionRusChanged();
            }
        }
        private global::System.String _DescriptionRus;
        partial void OnDescriptionRusChanging(global::System.String value);
        partial void OnDescriptionRusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HeaderImageEngURL
        {
            get
            {
                return _HeaderImageEngURL;
            }
            set
            {
                OnHeaderImageEngURLChanging(value);
                ReportPropertyChanging("HeaderImageEngURL");
                _HeaderImageEngURL = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HeaderImageEngURL");
                OnHeaderImageEngURLChanged();
            }
        }
        private global::System.String _HeaderImageEngURL;
        partial void OnHeaderImageEngURLChanging(global::System.String value);
        partial void OnHeaderImageEngURLChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String HeaderImageRusURL
        {
            get
            {
                return _HeaderImageRusURL;
            }
            set
            {
                OnHeaderImageRusURLChanging(value);
                ReportPropertyChanging("HeaderImageRusURL");
                _HeaderImageRusURL = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("HeaderImageRusURL");
                OnHeaderImageRusURLChanged();
            }
        }
        private global::System.String _HeaderImageRusURL;
        partial void OnHeaderImageRusURLChanging(global::System.String value);
        partial void OnHeaderImageRusURLChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Marked
        {
            get
            {
                return _Marked;
            }
            set
            {
                OnMarkedChanging(value);
                ReportPropertyChanging("Marked");
                _Marked = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Marked");
                OnMarkedChanged();
            }
        }
        private global::System.Boolean _Marked;
        partial void OnMarkedChanging(global::System.Boolean value);
        partial void OnMarkedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GroupTitle
        {
            get
            {
                return _GroupTitle;
            }
            set
            {
                OnGroupTitleChanging(value);
                ReportPropertyChanging("GroupTitle");
                _GroupTitle = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GroupTitle");
                OnGroupTitleChanged();
            }
        }
        private global::System.String _GroupTitle;
        partial void OnGroupTitleChanging(global::System.String value);
        partial void OnGroupTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MetaDescription
        {
            get
            {
                return _MetaDescription;
            }
            set
            {
                OnMetaDescriptionChanging(value);
                ReportPropertyChanging("MetaDescription");
                _MetaDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MetaDescription");
                OnMetaDescriptionChanged();
            }
        }
        private global::System.String _MetaDescription;
        partial void OnMetaDescriptionChanging(global::System.String value);
        partial void OnMetaDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MetaKeywords
        {
            get
            {
                return _MetaKeywords;
            }
            set
            {
                OnMetaKeywordsChanging(value);
                ReportPropertyChanging("MetaKeywords");
                _MetaKeywords = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MetaKeywords");
                OnMetaKeywordsChanged();
            }
        }
        private global::System.String _MetaKeywords;
        partial void OnMetaKeywordsChanging(global::System.String value);
        partial void OnMetaKeywordsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CatOrder
        {
            get
            {
                return _CatOrder;
            }
            set
            {
                OnCatOrderChanging(value);
                ReportPropertyChanging("CatOrder");
                _CatOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CatOrder");
                OnCatOrderChanged();
            }
        }
        private global::System.Int32 _CatOrder;
        partial void OnCatOrderChanging(global::System.Int32 value);
        partial void OnCatOrderChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description2Rus
        {
            get
            {
                return _Description2Rus;
            }
            set
            {
                OnDescription2RusChanging(value);
                ReportPropertyChanging("Description2Rus");
                _Description2Rus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description2Rus");
                OnDescription2RusChanged();
            }
        }
        private global::System.String _Description2Rus;
        partial void OnDescription2RusChanging(global::System.String value);
        partial void OnDescription2RusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean InGeneralLink
        {
            get
            {
                return _InGeneralLink;
            }
            set
            {
                OnInGeneralLinkChanging(value);
                ReportPropertyChanging("InGeneralLink");
                _InGeneralLink = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("InGeneralLink");
                OnInGeneralLinkChanged();
            }
        }
        private global::System.Boolean _InGeneralLink;
        partial void OnInGeneralLinkChanging(global::System.Boolean value);
        partial void OnInGeneralLinkChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoCathegory_echoGroups", "echoGroups")]
        public Group Group
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Group>("ProductsModel.FK_echoCathegory_echoGroups", "echoGroups").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Group>("ProductsModel.FK_echoCathegory_echoGroups", "echoGroups").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Group> GroupReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Group>("ProductsModel.FK_echoCathegory_echoGroups", "echoGroups");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Group>("ProductsModel.FK_echoCathegory_echoGroups", "echoGroups", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoCathegory_echoTemplate", "echoTemplate")]
        public Template Template
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Template>("ProductsModel.FK_echoCathegory_echoTemplate", "echoTemplate").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Template>("ProductsModel.FK_echoCathegory_echoTemplate", "echoTemplate").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Template> TemplateReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Template>("ProductsModel.FK_echoCathegory_echoTemplate", "echoTemplate");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Template>("ProductsModel.FK_echoCathegory_echoTemplate", "echoTemplate", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoCollection_echoCathegory", "echoCollection")]
        public EntityCollection<Collection> Collections
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Collection>("ProductsModel.FK_echoCollection_echoCathegory", "echoCollection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Collection>("ProductsModel.FK_echoCollection_echoCathegory", "echoCollection", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="Collection")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Collection : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Collection.
        /// </summary>
        /// <param name="collID">Исходное значение свойства CollID.</param>
        public static Collection CreateCollection(global::System.Int32 collID)
        {
            Collection collection = new Collection();
            collection.CollID = collID;
            return collection;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CollID
        {
            get
            {
                return _CollID;
            }
            set
            {
                if (_CollID != value)
                {
                    OnCollIDChanging(value);
                    ReportPropertyChanging("CollID");
                    _CollID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CollID");
                    OnCollIDChanged();
                }
            }
        }
        private global::System.Int32 _CollID;
        partial void OnCollIDChanging(global::System.Int32 value);
        partial void OnCollIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoCollection_echoCathegory", "echoCathegory")]
        public Cathegory Cathegory
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cathegory>("ProductsModel.FK_echoCollection_echoCathegory", "echoCathegory").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cathegory>("ProductsModel.FK_echoCollection_echoCathegory", "echoCathegory").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Cathegory> CathegoryReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Cathegory>("ProductsModel.FK_echoCollection_echoCathegory", "echoCathegory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Cathegory>("ProductsModel.FK_echoCollection_echoCathegory", "echoCathegory", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoCollection_echoProducts", "echoProducts")]
        public Product Product
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ProductsModel.FK_echoCollection_echoProducts", "echoProducts").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ProductsModel.FK_echoCollection_echoProducts", "echoProducts").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Product> ProductReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ProductsModel.FK_echoCollection_echoProducts", "echoProducts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Product>("ProductsModel.FK_echoCollection_echoProducts", "echoProducts", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="Color")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Color : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Color.
        /// </summary>
        /// <param name="colorID">Исходное значение свойства ColorID.</param>
        /// <param name="colorNameEng">Исходное значение свойства ColorNameEng.</param>
        /// <param name="colorNameRus">Исходное значение свойства ColorNameRus.</param>
        /// <param name="isMain">Исходное значение свойства IsMain.</param>
        public static Color CreateColor(global::System.Int32 colorID, global::System.String colorNameEng, global::System.String colorNameRus, global::System.Boolean isMain)
        {
            Color color = new Color();
            color.ColorID = colorID;
            color.ColorNameEng = colorNameEng;
            color.ColorNameRus = colorNameRus;
            color.IsMain = isMain;
            return color;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ColorID
        {
            get
            {
                return _ColorID;
            }
            set
            {
                if (_ColorID != value)
                {
                    OnColorIDChanging(value);
                    ReportPropertyChanging("ColorID");
                    _ColorID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ColorID");
                    OnColorIDChanged();
                }
            }
        }
        private global::System.Int32 _ColorID;
        partial void OnColorIDChanging(global::System.Int32 value);
        partial void OnColorIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ColorNameEng
        {
            get
            {
                return _ColorNameEng;
            }
            set
            {
                OnColorNameEngChanging(value);
                ReportPropertyChanging("ColorNameEng");
                _ColorNameEng = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ColorNameEng");
                OnColorNameEngChanged();
            }
        }
        private global::System.String _ColorNameEng;
        partial void OnColorNameEngChanging(global::System.String value);
        partial void OnColorNameEngChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ColorNameRus
        {
            get
            {
                return _ColorNameRus;
            }
            set
            {
                OnColorNameRusChanging(value);
                ReportPropertyChanging("ColorNameRus");
                _ColorNameRus = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ColorNameRus");
                OnColorNameRusChanged();
            }
        }
        private global::System.String _ColorNameRus;
        partial void OnColorNameRusChanging(global::System.String value);
        partial void OnColorNameRusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsMain
        {
            get
            {
                return _IsMain;
            }
            set
            {
                OnIsMainChanging(value);
                ReportPropertyChanging("IsMain");
                _IsMain = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsMain");
                OnIsMainChanged();
            }
        }
        private global::System.Boolean _IsMain;
        partial void OnIsMainChanging(global::System.Boolean value);
        partial void OnIsMainChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProductColors_echoColors", "echoProductColors")]
        public EntityCollection<ProductColor> ProductColors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ProductColor>("ProductsModel.FK_echoProductColors_echoColors", "echoProductColors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ProductColor>("ProductsModel.FK_echoProductColors_echoColors", "echoProductColors", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="Group")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Group : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Group.
        /// </summary>
        /// <param name="avaliableInEngilsh">Исходное значение свойства AvaliableInEngilsh.</param>
        /// <param name="groupID">Исходное значение свойства GroupID.</param>
        /// <param name="groupNameEng">Исходное значение свойства GroupNameEng.</param>
        /// <param name="groupNameRus">Исходное значение свойства GroupNameRus.</param>
        /// <param name="haveGeneralLink">Исходное значение свойства HaveGeneralLink.</param>
        /// <param name="avaliable">Исходное значение свойства Avaliable.</param>
        public static Group CreateGroup(global::System.Boolean avaliableInEngilsh, global::System.Int32 groupID, global::System.String groupNameEng, global::System.String groupNameRus, global::System.Boolean haveGeneralLink, global::System.Boolean avaliable)
        {
            Group group = new Group();
            group.AvaliableInEngilsh = avaliableInEngilsh;
            group.GroupID = groupID;
            group.GroupNameEng = groupNameEng;
            group.GroupNameRus = groupNameRus;
            group.HaveGeneralLink = haveGeneralLink;
            group.Avaliable = avaliable;
            return group;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean AvaliableInEngilsh
        {
            get
            {
                return _AvaliableInEngilsh;
            }
            set
            {
                OnAvaliableInEngilshChanging(value);
                ReportPropertyChanging("AvaliableInEngilsh");
                _AvaliableInEngilsh = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AvaliableInEngilsh");
                OnAvaliableInEngilshChanged();
            }
        }
        private global::System.Boolean _AvaliableInEngilsh;
        partial void OnAvaliableInEngilshChanging(global::System.Boolean value);
        partial void OnAvaliableInEngilshChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 GroupID
        {
            get
            {
                return _GroupID;
            }
            set
            {
                if (_GroupID != value)
                {
                    OnGroupIDChanging(value);
                    ReportPropertyChanging("GroupID");
                    _GroupID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("GroupID");
                    OnGroupIDChanged();
                }
            }
        }
        private global::System.Int32 _GroupID;
        partial void OnGroupIDChanging(global::System.Int32 value);
        partial void OnGroupIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GroupNameEng
        {
            get
            {
                return _GroupNameEng;
            }
            set
            {
                OnGroupNameEngChanging(value);
                ReportPropertyChanging("GroupNameEng");
                _GroupNameEng = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GroupNameEng");
                OnGroupNameEngChanged();
            }
        }
        private global::System.String _GroupNameEng;
        partial void OnGroupNameEngChanging(global::System.String value);
        partial void OnGroupNameEngChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String GroupNameRus
        {
            get
            {
                return _GroupNameRus;
            }
            set
            {
                OnGroupNameRusChanging(value);
                ReportPropertyChanging("GroupNameRus");
                _GroupNameRus = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("GroupNameRus");
                OnGroupNameRusChanged();
            }
        }
        private global::System.String _GroupNameRus;
        partial void OnGroupNameRusChanging(global::System.String value);
        partial void OnGroupNameRusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> GroupOrder
        {
            get
            {
                return _GroupOrder;
            }
            set
            {
                OnGroupOrderChanging(value);
                ReportPropertyChanging("GroupOrder");
                _GroupOrder = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("GroupOrder");
                OnGroupOrderChanged();
            }
        }
        private Nullable<global::System.Int32> _GroupOrder;
        partial void OnGroupOrderChanging(Nullable<global::System.Int32> value);
        partial void OnGroupOrderChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean HaveGeneralLink
        {
            get
            {
                return _HaveGeneralLink;
            }
            set
            {
                OnHaveGeneralLinkChanging(value);
                ReportPropertyChanging("HaveGeneralLink");
                _HaveGeneralLink = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HaveGeneralLink");
                OnHaveGeneralLinkChanged();
            }
        }
        private global::System.Boolean _HaveGeneralLink;
        partial void OnHaveGeneralLinkChanging(global::System.Boolean value);
        partial void OnHaveGeneralLinkChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String GroupTitle
        {
            get
            {
                return _GroupTitle;
            }
            set
            {
                OnGroupTitleChanging(value);
                ReportPropertyChanging("GroupTitle");
                _GroupTitle = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("GroupTitle");
                OnGroupTitleChanged();
            }
        }
        private global::System.String _GroupTitle;
        partial void OnGroupTitleChanging(global::System.String value);
        partial void OnGroupTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MetaDescription
        {
            get
            {
                return _MetaDescription;
            }
            set
            {
                OnMetaDescriptionChanging(value);
                ReportPropertyChanging("MetaDescription");
                _MetaDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MetaDescription");
                OnMetaDescriptionChanged();
            }
        }
        private global::System.String _MetaDescription;
        partial void OnMetaDescriptionChanging(global::System.String value);
        partial void OnMetaDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MetaKeywords
        {
            get
            {
                return _MetaKeywords;
            }
            set
            {
                OnMetaKeywordsChanging(value);
                ReportPropertyChanging("MetaKeywords");
                _MetaKeywords = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MetaKeywords");
                OnMetaKeywordsChanged();
            }
        }
        private global::System.String _MetaKeywords;
        partial void OnMetaKeywordsChanging(global::System.String value);
        partial void OnMetaKeywordsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Avaliable
        {
            get
            {
                return _Avaliable;
            }
            set
            {
                OnAvaliableChanging(value);
                ReportPropertyChanging("Avaliable");
                _Avaliable = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Avaliable");
                OnAvaliableChanged();
            }
        }
        private global::System.Boolean _Avaliable;
        partial void OnAvaliableChanging(global::System.Boolean value);
        partial void OnAvaliableChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoCathegory_echoGroups", "echoCathegory")]
        public EntityCollection<Cathegory> Cathegories
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Cathegory>("ProductsModel.FK_echoCathegory_echoGroups", "echoCathegory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Cathegory>("ProductsModel.FK_echoCathegory_echoGroups", "echoCathegory", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="Platform")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Platform : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Platform.
        /// </summary>
        /// <param name="dateCreated">Исходное значение свойства DateCreated.</param>
        /// <param name="platformID">Исходное значение свойства PlatformID.</param>
        /// <param name="platformNameEng">Исходное значение свойства PlatformNameEng.</param>
        /// <param name="platformNameRus">Исходное значение свойства PlatformNameRus.</param>
        public static Platform CreatePlatform(global::System.DateTime dateCreated, global::System.Int32 platformID, global::System.String platformNameEng, global::System.String platformNameRus)
        {
            Platform platform = new Platform();
            platform.DateCreated = dateCreated;
            platform.PlatformID = platformID;
            platform.PlatformNameEng = platformNameEng;
            platform.PlatformNameRus = platformNameRus;
            return platform;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateUpdated
        {
            get
            {
                return _DateUpdated;
            }
            set
            {
                OnDateUpdatedChanging(value);
                ReportPropertyChanging("DateUpdated");
                _DateUpdated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateUpdated");
                OnDateUpdatedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateUpdated;
        partial void OnDateUpdatedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateUpdatedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PlatformDescriptionEng
        {
            get
            {
                return _PlatformDescriptionEng;
            }
            set
            {
                OnPlatformDescriptionEngChanging(value);
                ReportPropertyChanging("PlatformDescriptionEng");
                _PlatformDescriptionEng = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PlatformDescriptionEng");
                OnPlatformDescriptionEngChanged();
            }
        }
        private global::System.String _PlatformDescriptionEng;
        partial void OnPlatformDescriptionEngChanging(global::System.String value);
        partial void OnPlatformDescriptionEngChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String PlatformDescriptionRus
        {
            get
            {
                return _PlatformDescriptionRus;
            }
            set
            {
                OnPlatformDescriptionRusChanging(value);
                ReportPropertyChanging("PlatformDescriptionRus");
                _PlatformDescriptionRus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("PlatformDescriptionRus");
                OnPlatformDescriptionRusChanged();
            }
        }
        private global::System.String _PlatformDescriptionRus;
        partial void OnPlatformDescriptionRusChanging(global::System.String value);
        partial void OnPlatformDescriptionRusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PlatformID
        {
            get
            {
                return _PlatformID;
            }
            set
            {
                if (_PlatformID != value)
                {
                    OnPlatformIDChanging(value);
                    ReportPropertyChanging("PlatformID");
                    _PlatformID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("PlatformID");
                    OnPlatformIDChanged();
                }
            }
        }
        private global::System.Int32 _PlatformID;
        partial void OnPlatformIDChanging(global::System.Int32 value);
        partial void OnPlatformIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PlatformNameEng
        {
            get
            {
                return _PlatformNameEng;
            }
            set
            {
                OnPlatformNameEngChanging(value);
                ReportPropertyChanging("PlatformNameEng");
                _PlatformNameEng = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PlatformNameEng");
                OnPlatformNameEngChanged();
            }
        }
        private global::System.String _PlatformNameEng;
        partial void OnPlatformNameEngChanging(global::System.String value);
        partial void OnPlatformNameEngChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PlatformNameRus
        {
            get
            {
                return _PlatformNameRus;
            }
            set
            {
                OnPlatformNameRusChanging(value);
                ReportPropertyChanging("PlatformNameRus");
                _PlatformNameRus = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PlatformNameRus");
                OnPlatformNameRusChanged();
            }
        }
        private global::System.String _PlatformNameRus;
        partial void OnPlatformNameRusChanging(global::System.String value);
        partial void OnPlatformNameRusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SizeInfo
        {
            get
            {
                return _SizeInfo;
            }
            set
            {
                OnSizeInfoChanging(value);
                ReportPropertyChanging("SizeInfo");
                _SizeInfo = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SizeInfo");
                OnSizeInfoChanged();
            }
        }
        private global::System.String _SizeInfo;
        partial void OnSizeInfoChanging(global::System.String value);
        partial void OnSizeInfoChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProducts_echoPlatforms", "echoProducts")]
        public EntityCollection<Product> Products
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Product>("ProductsModel.FK_echoProducts_echoPlatforms", "echoProducts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Product>("ProductsModel.FK_echoProducts_echoPlatforms", "echoProducts", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="Product")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Product : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Product.
        /// </summary>
        /// <param name="available">Исходное значение свойства Available.</param>
        /// <param name="dateCreated">Исходное значение свойства DateCreated.</param>
        /// <param name="origPrice">Исходное значение свойства OrigPrice.</param>
        /// <param name="prodID">Исходное значение свойства ProdID.</param>
        /// <param name="prodTypeID">Исходное значение свойства ProdTypeID.</param>
        /// <param name="productNameEng">Исходное значение свойства ProductNameEng.</param>
        /// <param name="productNameRus">Исходное значение свойства ProductNameRus.</param>
        /// <param name="sortedName">Исходное значение свойства SortedName.</param>
        /// <param name="thumbURL">Исходное значение свойства ThumbURL.</param>
        /// <param name="onSale">Исходное значение свойства OnSale.</param>
        /// <param name="fromUsa">Исходное значение свойства FromUsa.</param>
        /// <param name="isVip">Исходное значение свойства IsVip.</param>
        /// <param name="onSale2">Исходное значение свойства OnSale2.</param>
        public static Product CreateProduct(global::System.Boolean available, global::System.DateTime dateCreated, global::System.Decimal origPrice, global::System.Int32 prodID, global::System.Int32 prodTypeID, global::System.String productNameEng, global::System.String productNameRus, global::System.String sortedName, global::System.String thumbURL, global::System.Boolean onSale, global::System.Boolean fromUsa, global::System.Boolean isVip, global::System.Boolean onSale2)
        {
            Product product = new Product();
            product.Available = available;
            product.DateCreated = dateCreated;
            product.OrigPrice = origPrice;
            product.ProdID = prodID;
            product.ProdTypeID = prodTypeID;
            product.ProductNameEng = productNameEng;
            product.ProductNameRus = productNameRus;
            product.SortedName = sortedName;
            product.ThumbURL = thumbURL;
            product.OnSale = onSale;
            product.FromUsa = fromUsa;
            product.IsVip = isVip;
            product.OnSale2 = onSale2;
            return product;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean Available
        {
            get
            {
                return _Available;
            }
            set
            {
                OnAvailableChanging(value);
                ReportPropertyChanging("Available");
                _Available = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Available");
                OnAvailableChanged();
            }
        }
        private global::System.Boolean _Available;
        partial void OnAvailableChanging(global::System.Boolean value);
        partial void OnAvailableChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateUpdated
        {
            get
            {
                return _DateUpdated;
            }
            set
            {
                OnDateUpdatedChanging(value);
                ReportPropertyChanging("DateUpdated");
                _DateUpdated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateUpdated");
                OnDateUpdatedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateUpdated;
        partial void OnDateUpdatedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateUpdatedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal OrigPrice
        {
            get
            {
                return _OrigPrice;
            }
            set
            {
                OnOrigPriceChanging(value);
                ReportPropertyChanging("OrigPrice");
                _OrigPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OrigPrice");
                OnOrigPriceChanged();
            }
        }
        private global::System.Decimal _OrigPrice;
        partial void OnOrigPriceChanging(global::System.Decimal value);
        partial void OnOrigPriceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProdID
        {
            get
            {
                return _ProdID;
            }
            set
            {
                if (_ProdID != value)
                {
                    OnProdIDChanging(value);
                    ReportPropertyChanging("ProdID");
                    _ProdID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ProdID");
                    OnProdIDChanged();
                }
            }
        }
        private global::System.Int32 _ProdID;
        partial void OnProdIDChanging(global::System.Int32 value);
        partial void OnProdIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProdTypeID
        {
            get
            {
                return _ProdTypeID;
            }
            set
            {
                OnProdTypeIDChanging(value);
                ReportPropertyChanging("ProdTypeID");
                _ProdTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProdTypeID");
                OnProdTypeIDChanged();
            }
        }
        private global::System.Int32 _ProdTypeID;
        partial void OnProdTypeIDChanging(global::System.Int32 value);
        partial void OnProdTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ProductDescriptionEng
        {
            get
            {
                return _ProductDescriptionEng;
            }
            set
            {
                OnProductDescriptionEngChanging(value);
                ReportPropertyChanging("ProductDescriptionEng");
                _ProductDescriptionEng = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ProductDescriptionEng");
                OnProductDescriptionEngChanged();
            }
        }
        private global::System.String _ProductDescriptionEng;
        partial void OnProductDescriptionEngChanging(global::System.String value);
        partial void OnProductDescriptionEngChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String ProductDescriptionRus
        {
            get
            {
                return _ProductDescriptionRus;
            }
            set
            {
                OnProductDescriptionRusChanging(value);
                ReportPropertyChanging("ProductDescriptionRus");
                _ProductDescriptionRus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("ProductDescriptionRus");
                OnProductDescriptionRusChanged();
            }
        }
        private global::System.String _ProductDescriptionRus;
        partial void OnProductDescriptionRusChanging(global::System.String value);
        partial void OnProductDescriptionRusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ProductNameEng
        {
            get
            {
                return _ProductNameEng;
            }
            set
            {
                OnProductNameEngChanging(value);
                ReportPropertyChanging("ProductNameEng");
                _ProductNameEng = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ProductNameEng");
                OnProductNameEngChanged();
            }
        }
        private global::System.String _ProductNameEng;
        partial void OnProductNameEngChanging(global::System.String value);
        partial void OnProductNameEngChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ProductNameRus
        {
            get
            {
                return _ProductNameRus;
            }
            set
            {
                OnProductNameRusChanging(value);
                ReportPropertyChanging("ProductNameRus");
                _ProductNameRus = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ProductNameRus");
                OnProductNameRusChanged();
            }
        }
        private global::System.String _ProductNameRus;
        partial void OnProductNameRusChanging(global::System.String value);
        partial void OnProductNameRusChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> SalePrice
        {
            get
            {
                return _SalePrice;
            }
            set
            {
                OnSalePriceChanging(value);
                ReportPropertyChanging("SalePrice");
                _SalePrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SalePrice");
                OnSalePriceChanged();
            }
        }
        private Nullable<global::System.Decimal> _SalePrice;
        partial void OnSalePriceChanging(Nullable<global::System.Decimal> value);
        partial void OnSalePriceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String SortedName
        {
            get
            {
                return _SortedName;
            }
            set
            {
                OnSortedNameChanging(value);
                ReportPropertyChanging("SortedName");
                _SortedName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("SortedName");
                OnSortedNameChanged();
            }
        }
        private global::System.String _SortedName;
        partial void OnSortedNameChanging(global::System.String value);
        partial void OnSortedNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ThumbURL
        {
            get
            {
                return _ThumbURL;
            }
            set
            {
                OnThumbURLChanging(value);
                ReportPropertyChanging("ThumbURL");
                _ThumbURL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ThumbURL");
                OnThumbURLChanged();
            }
        }
        private global::System.String _ThumbURL;
        partial void OnThumbURLChanging(global::System.String value);
        partial void OnThumbURLChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> WHSPrice
        {
            get
            {
                return _WHSPrice;
            }
            set
            {
                OnWHSPriceChanging(value);
                ReportPropertyChanging("WHSPrice");
                _WHSPrice = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("WHSPrice");
                OnWHSPriceChanged();
            }
        }
        private Nullable<global::System.Decimal> _WHSPrice;
        partial void OnWHSPriceChanging(Nullable<global::System.Decimal> value);
        partial void OnWHSPriceChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean OnSale
        {
            get
            {
                return _OnSale;
            }
            set
            {
                OnOnSaleChanging(value);
                ReportPropertyChanging("OnSale");
                _OnSale = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OnSale");
                OnOnSaleChanged();
            }
        }
        private global::System.Boolean _OnSale;
        partial void OnOnSaleChanging(global::System.Boolean value);
        partial void OnOnSaleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean FromUsa
        {
            get
            {
                return _FromUsa;
            }
            set
            {
                OnFromUsaChanging(value);
                ReportPropertyChanging("FromUsa");
                _FromUsa = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("FromUsa");
                OnFromUsaChanged();
            }
        }
        private global::System.Boolean _FromUsa;
        partial void OnFromUsaChanging(global::System.Boolean value);
        partial void OnFromUsaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Alt
        {
            get
            {
                return _Alt;
            }
            set
            {
                OnAltChanging(value);
                ReportPropertyChanging("Alt");
                _Alt = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Alt");
                OnAltChanged();
            }
        }
        private global::System.String _Alt;
        partial void OnAltChanging(global::System.String value);
        partial void OnAltChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsVip
        {
            get
            {
                return _IsVip;
            }
            set
            {
                OnIsVipChanging(value);
                ReportPropertyChanging("IsVip");
                _IsVip = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsVip");
                OnIsVipChanged();
            }
        }
        private global::System.Boolean _IsVip;
        partial void OnIsVipChanging(global::System.Boolean value);
        partial void OnIsVipChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean OnSale2
        {
            get
            {
                return _OnSale2;
            }
            set
            {
                OnOnSale2Changing(value);
                ReportPropertyChanging("OnSale2");
                _OnSale2 = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("OnSale2");
                OnOnSale2Changed();
            }
        }
        private global::System.Boolean _OnSale2;
        partial void OnOnSale2Changing(global::System.Boolean value);
        partial void OnOnSale2Changed();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoCollection_echoProducts", "echoCollection")]
        public EntityCollection<Collection> Collections
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Collection>("ProductsModel.FK_echoCollection_echoProducts", "echoCollection");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Collection>("ProductsModel.FK_echoCollection_echoProducts", "echoCollection", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProducts_echoPlatforms", "echoPlatforms")]
        public Platform Platform
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Platform>("ProductsModel.FK_echoProducts_echoPlatforms", "echoPlatforms").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Platform>("ProductsModel.FK_echoProducts_echoPlatforms", "echoPlatforms").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Platform> PlatformReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Platform>("ProductsModel.FK_echoProducts_echoPlatforms", "echoPlatforms");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Platform>("ProductsModel.FK_echoProducts_echoPlatforms", "echoPlatforms", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProductColors_echoProducts", "echoProductColors")]
        public EntityCollection<ProductColor> ProductColors
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ProductColor>("ProductsModel.FK_echoProductColors_echoProducts", "echoProductColors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ProductColor>("ProductsModel.FK_echoProductColors_echoProducts", "echoProductColors", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProducts_echoBrands", "echoBrands")]
        public Brand Brand
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Brand>("ProductsModel.FK_echoProducts_echoBrands", "echoBrands").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Brand>("ProductsModel.FK_echoProducts_echoBrands", "echoBrands").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Brand> BrandReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Brand>("ProductsModel.FK_echoProducts_echoBrands", "echoBrands");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Brand>("ProductsModel.FK_echoProducts_echoBrands", "echoBrands", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="ProductColor")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ProductColor : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ProductColor.
        /// </summary>
        /// <param name="dateCreated">Исходное значение свойства DateCreated.</param>
        /// <param name="imageURL">Исходное значение свойства ImageURL.</param>
        /// <param name="prodColorID">Исходное значение свойства ProdColorID.</param>
        public static ProductColor CreateProductColor(global::System.DateTime dateCreated, global::System.String imageURL, global::System.Int32 prodColorID)
        {
            ProductColor productColor = new ProductColor();
            productColor.DateCreated = dateCreated;
            productColor.ImageURL = imageURL;
            productColor.ProdColorID = prodColorID;
            return productColor;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreated
        {
            get
            {
                return _DateCreated;
            }
            set
            {
                OnDateCreatedChanging(value);
                ReportPropertyChanging("DateCreated");
                _DateCreated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreated");
                OnDateCreatedChanged();
            }
        }
        private global::System.DateTime _DateCreated;
        partial void OnDateCreatedChanging(global::System.DateTime value);
        partial void OnDateCreatedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateUpdated
        {
            get
            {
                return _DateUpdated;
            }
            set
            {
                OnDateUpdatedChanging(value);
                ReportPropertyChanging("DateUpdated");
                _DateUpdated = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateUpdated");
                OnDateUpdatedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateUpdated;
        partial void OnDateUpdatedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateUpdatedChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ImageURL
        {
            get
            {
                return _ImageURL;
            }
            set
            {
                OnImageURLChanging(value);
                ReportPropertyChanging("ImageURL");
                _ImageURL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ImageURL");
                OnImageURLChanged();
            }
        }
        private global::System.String _ImageURL;
        partial void OnImageURLChanging(global::System.String value);
        partial void OnImageURLChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProdColorID
        {
            get
            {
                return _ProdColorID;
            }
            set
            {
                if (_ProdColorID != value)
                {
                    OnProdColorIDChanging(value);
                    ReportPropertyChanging("ProdColorID");
                    _ProdColorID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ProdColorID");
                    OnProdColorIDChanged();
                }
            }
        }
        private global::System.Int32 _ProdColorID;
        partial void OnProdColorIDChanging(global::System.Int32 value);
        partial void OnProdColorIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProductColors_echoColors", "echoColors")]
        public Color Color
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Color>("ProductsModel.FK_echoProductColors_echoColors", "echoColors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Color>("ProductsModel.FK_echoProductColors_echoColors", "echoColors").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Color> ColorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Color>("ProductsModel.FK_echoProductColors_echoColors", "echoColors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Color>("ProductsModel.FK_echoProductColors_echoColors", "echoColors", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProductColors_echoProducts", "echoProducts")]
        public Product Product
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ProductsModel.FK_echoProductColors_echoProducts", "echoProducts").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ProductsModel.FK_echoProductColors_echoProducts", "echoProducts").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Product> ProductReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Product>("ProductsModel.FK_echoProductColors_echoProducts", "echoProducts");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Product>("ProductsModel.FK_echoProductColors_echoProducts", "echoProducts", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProductSizes_echoProductColors", "echoProductSizes")]
        public EntityCollection<ProductSize> ProductSizes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ProductSize>("ProductsModel.FK_echoProductSizes_echoProductColors", "echoProductSizes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ProductSize>("ProductsModel.FK_echoProductSizes_echoProductColors", "echoProductSizes", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="ProductSize")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ProductSize : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ProductSize.
        /// </summary>
        /// <param name="prodSizeID">Исходное значение свойства ProdSizeID.</param>
        public static ProductSize CreateProductSize(global::System.Int32 prodSizeID)
        {
            ProductSize productSize = new ProductSize();
            productSize.ProdSizeID = prodSizeID;
            return productSize;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ProdSizeID
        {
            get
            {
                return _ProdSizeID;
            }
            set
            {
                if (_ProdSizeID != value)
                {
                    OnProdSizeIDChanging(value);
                    ReportPropertyChanging("ProdSizeID");
                    _ProdSizeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ProdSizeID");
                    OnProdSizeIDChanged();
                }
            }
        }
        private global::System.Int32 _ProdSizeID;
        partial void OnProdSizeIDChanging(global::System.Int32 value);
        partial void OnProdSizeIDChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProductSizes_echoProductColors", "echoProductColors")]
        public ProductColor ProductColor
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProductColor>("ProductsModel.FK_echoProductSizes_echoProductColors", "echoProductColors").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProductColor>("ProductsModel.FK_echoProductSizes_echoProductColors", "echoProductColors").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ProductColor> ProductColorReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ProductColor>("ProductsModel.FK_echoProductSizes_echoProductColors", "echoProductColors");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ProductColor>("ProductsModel.FK_echoProductSizes_echoProductColors", "echoProductColors", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProductSizes_echoSizes", "echoSizes")]
        public Size Size
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Size>("ProductsModel.FK_echoProductSizes_echoSizes", "echoSizes").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Size>("ProductsModel.FK_echoProductSizes_echoSizes", "echoSizes").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Size> SizeReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Size>("ProductsModel.FK_echoProductSizes_echoSizes", "echoSizes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Size>("ProductsModel.FK_echoProductSizes_echoSizes", "echoSizes", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="Size")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Size : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Size.
        /// </summary>
        /// <param name="sizeID">Исходное значение свойства SizeID.</param>
        public static Size CreateSize(global::System.Int32 sizeID)
        {
            Size size = new Size();
            size.SizeID = sizeID;
            return size;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ProdTypeID
        {
            get
            {
                return _ProdTypeID;
            }
            set
            {
                OnProdTypeIDChanging(value);
                ReportPropertyChanging("ProdTypeID");
                _ProdTypeID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ProdTypeID");
                OnProdTypeIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ProdTypeID;
        partial void OnProdTypeIDChanging(Nullable<global::System.Int32> value);
        partial void OnProdTypeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 SizeID
        {
            get
            {
                return _SizeID;
            }
            set
            {
                if (_SizeID != value)
                {
                    OnSizeIDChanging(value);
                    ReportPropertyChanging("SizeID");
                    _SizeID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("SizeID");
                    OnSizeIDChanged();
                }
            }
        }
        private global::System.Int32 _SizeID;
        partial void OnSizeIDChanging(global::System.Int32 value);
        partial void OnSizeIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SizeNameEng
        {
            get
            {
                return _SizeNameEng;
            }
            set
            {
                OnSizeNameEngChanging(value);
                ReportPropertyChanging("SizeNameEng");
                _SizeNameEng = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SizeNameEng");
                OnSizeNameEngChanged();
            }
        }
        private global::System.String _SizeNameEng;
        partial void OnSizeNameEngChanging(global::System.String value);
        partial void OnSizeNameEngChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String SizeNameRus
        {
            get
            {
                return _SizeNameRus;
            }
            set
            {
                OnSizeNameRusChanging(value);
                ReportPropertyChanging("SizeNameRus");
                _SizeNameRus = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("SizeNameRus");
                OnSizeNameRusChanged();
            }
        }
        private global::System.String _SizeNameRus;
        partial void OnSizeNameRusChanging(global::System.String value);
        partial void OnSizeNameRusChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoProductSizes_echoSizes", "echoProductSizes")]
        public EntityCollection<ProductSize> ProductSizes
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ProductSize>("ProductsModel.FK_echoProductSizes_echoSizes", "echoProductSizes");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ProductSize>("ProductsModel.FK_echoProductSizes_echoSizes", "echoProductSizes", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ProductsModel", Name="Template")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Template : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Template.
        /// </summary>
        /// <param name="templeID">Исходное значение свойства TempleID.</param>
        /// <param name="templeItemURL">Исходное значение свойства TempleItemURL.</param>
        /// <param name="templeName">Исходное значение свойства TempleName.</param>
        /// <param name="templeURL">Исходное значение свойства TempleURL.</param>
        public static Template CreateTemplate(global::System.Int32 templeID, global::System.String templeItemURL, global::System.String templeName, global::System.String templeURL)
        {
            Template template = new Template();
            template.TempleID = templeID;
            template.TempleItemURL = templeItemURL;
            template.TempleName = templeName;
            template.TempleURL = templeURL;
            return template;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TempleID
        {
            get
            {
                return _TempleID;
            }
            set
            {
                if (_TempleID != value)
                {
                    OnTempleIDChanging(value);
                    ReportPropertyChanging("TempleID");
                    _TempleID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TempleID");
                    OnTempleIDChanged();
                }
            }
        }
        private global::System.Int32 _TempleID;
        partial void OnTempleIDChanging(global::System.Int32 value);
        partial void OnTempleIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TempleItemURL
        {
            get
            {
                return _TempleItemURL;
            }
            set
            {
                OnTempleItemURLChanging(value);
                ReportPropertyChanging("TempleItemURL");
                _TempleItemURL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TempleItemURL");
                OnTempleItemURLChanged();
            }
        }
        private global::System.String _TempleItemURL;
        partial void OnTempleItemURLChanging(global::System.String value);
        partial void OnTempleItemURLChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TempleName
        {
            get
            {
                return _TempleName;
            }
            set
            {
                OnTempleNameChanging(value);
                ReportPropertyChanging("TempleName");
                _TempleName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TempleName");
                OnTempleNameChanged();
            }
        }
        private global::System.String _TempleName;
        partial void OnTempleNameChanging(global::System.String value);
        partial void OnTempleNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TempleURL
        {
            get
            {
                return _TempleURL;
            }
            set
            {
                OnTempleURLChanging(value);
                ReportPropertyChanging("TempleURL");
                _TempleURL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TempleURL");
                OnTempleURLChanged();
            }
        }
        private global::System.String _TempleURL;
        partial void OnTempleURLChanging(global::System.String value);
        partial void OnTempleURLChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Theme
        {
            get
            {
                return _Theme;
            }
            set
            {
                OnThemeChanging(value);
                ReportPropertyChanging("Theme");
                _Theme = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Theme");
                OnThemeChanged();
            }
        }
        private global::System.String _Theme;
        partial void OnThemeChanging(global::System.String value);
        partial void OnThemeChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ProductsModel", "FK_echoCathegory_echoTemplate", "echoCathegory")]
        public EntityCollection<Cathegory> Cathegories
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Cathegory>("ProductsModel.FK_echoCathegory_echoTemplate", "echoCathegory");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Cathegory>("ProductsModel.FK_echoCathegory_echoTemplate", "echoCathegory", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
